/*

Description: 
Given two strings s and t, return true if s is a subsequence of t, or false otherwise.

A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) 
of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).

 

Example 1:

Input: s = "abc", t = "ahbgdc"
Output: true
Example 2:

Input: s = "axc", t = "ahbgdc"
Output: false


Algorithm: 

We designate two pointers for iteration, with the left pointer referring to the source string and the right pointer to the target string.

We move the pointers accordingly on the following two cases:

If source[left] == target[right]: we found a match. Hence, we move both pointers one step forward.

If source[left] != target[right]: no match is found. We then move only the right pointer on the target string.

The iteration would terminate, when either of the pointers exceeds its boundary.

At the end of the iteration, the result solely depends on the fact that whether we have consumed all the characters in the source string. 
If so, we have found a suitable match for each character in the source string. Therefore, the source string is a subsequence of the target string.

Time complexity: O(n) where n is the length of string t
Space complexity: O(1) 
*/
public class Solution {
    public bool IsSubsequence(string s, string t) {
        if(s.Length>t.Length){
            return false; 
        }

        int leftPointer=0; 
        int rightPointer=0; 
        while(leftPointer<s.Length && rightPointer<t.Length){

            if(s[leftPointer]==t[rightPointer]){
                leftPointer+=1; 
            }
            rightPointer+=1;
        }
        return leftPointer==s.Length; 
    }
}
