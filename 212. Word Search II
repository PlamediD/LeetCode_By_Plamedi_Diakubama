/*
212. Word Search II
Difficulty: Hard

Description: 
Given an m x n board of characters and a list of strings words, return all words on the board.

Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

 

Example 1:
Input: board = [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], words = ["oath","pea","eat","rain"]
Output: ["eat","oath"]
Example 2:
Input: board = [["a","b"],["c","d"]], words = ["abcb"]
Output: []
 

Constraints:

m == board.length
n == board[i].length
1 <= m, n <= 12
board[i][j] is a lowercase English letter.
1 <= words.length <= 3 * 104
*/

/*
Author: Plamedi Diakubama 
Language used: C#
*/
using System;
using System.Collections.Generic;

public class TrieNode
{
    public Dictionary<char, TrieNode> Children { get; private set; }
    public string Word { get; set; }

    public TrieNode()
    {
        Children = new Dictionary<char, TrieNode>();
        Word = null;
    }
}

public class Trie
{
    private TrieNode root;

    public Trie()
    {
        root = new TrieNode();
    }

    public void Insert(string word)
    {
        TrieNode node = root;
        foreach (char c in word)
        {
            if (!node.Children.ContainsKey(c))
                node.Children[c] = new TrieNode();
            node = node.Children[c];
        }
        node.Word = word;
    }
}

public class Solution
{
    public IList<string> FindWords(char[][] board, string[] words)
    {
        Trie trie = new Trie();
        foreach (string word in words)
            trie.Insert(word);

        List<string> result = new List<string>();

        void Backtrack(TrieNode node, int i, int j)
        {
            char c = board[i][j];
            if (!node.Children.ContainsKey(c))
                return;
            TrieNode nextNode = node.Children[c];
            if (nextNode.Word != null)
            {
                result.Add(nextNode.Word);
                nextNode.Word = null; // Mark word as found to avoid duplicates
            }

            board[i][j] = '#'; // Mark cell as visited
            int[][] directions = { new int[] { -1, 0 }, new int[] { 1, 0 }, new int[] { 0, -1 }, new int[] { 0, 1 } };
            foreach (int[] dir in directions)
            {
                int x = i + dir[0], y = j + dir[1];
                if (x >= 0 && x < board.Length && y >= 0 && y < board[0].Length && board[x][y] != '#')
                    Backtrack(nextNode, x, y);
            }
            board[i][j] = c; // Reset cell to its original value
        }

        for (int i = 0; i < board.Length; i++)
        {
            for (int j = 0; j < board[0].Length; j++)
            {
                Backtrack(trie.root, i, j);
            }
        }

        return result;
    }
}
