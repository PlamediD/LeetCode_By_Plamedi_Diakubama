/*
61. Rotate List

Difficulty: Medium 

Description: 

Given the head of a linked list, rotate the list to the right by k places.

 

Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:
Input: head = [0,1,2], k = 4
Output: [2,0,1]
Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode RotateRight(ListNode head, int k) {
        if (head == null || k == 0) return head;
        
        // Step 1: Count the number of nodes
        int length = 1;
        ListNode tail = head;
        while (tail.next != null) {
            tail = tail.next;
            length++;
        }
        
        // Step 2: Handle special cases
        if (length == 1 || k % length == 0) return head;
        
        // Step 3: Find the new tail node
        int stepsToNewTail = length - k % length - 1;
        ListNode newTail = head;
        for (int i = 0; i < stepsToNewTail; i++) {
            newTail = newTail.next;
        }
        
        // Step 4: Form a circular list
        tail.next = head;
        
        // Step 5: Update head pointer
        head = newTail.next;
        
        // Step 6: Set the next pointer of new tail to null
        newTail.next = null;
        
        return head;
    }
}
