/*243. Shortest Word Distance
Description: 
Given an array of strings wordsDict and two different strings that already exist in the array word1 and word2, 
return the shortest distance between these two words in the list.

Example 1:

Input: wordsDict = ["practice", "makes", "perfect", "coding", "makes"], word1 = "coding", word2 = "practice"
Output: 3

*/

//Language used: C#
//Time complexity: O(n^2)
//Space complexity: O(1) 

/*
Algo: 
set min as the length of the dictionary first 
traverse the dict to find word1
once word1 is found( index i) , start a new loop to find word2( index j)
update the min: find the min value between actual min and difference of i & j ( absolute value) 

*/

//code below: 
public class Solution {
    public int ShortestDistance(string[] wordsDict, string word1, string word2) {
        if(word1.Equals(word2)){
            return 0;
        }
        
        
        // assume total length of the string array wordsDict 
        // as the initial min
        int min= wordsDict.Length; 
        for(int i=0; i<wordsDict.Length; i++){
            
            //check if the owrd at index i is word1
            if(wordsDict[i].Equals(word1)){
                
                //if that is the case, then start a new loop
                //to find the second word 
                for(int j=0; j<wordsDict.Length; j++){
                    
                    //check if the word at index j is word2
                    if(wordsDict[j].Equals(word2)){
                        
                        //update min 
                        //find the minimum number between |i-j| and the current min
                        min=Math.Min(min, Math.Abs(i-j));
                    }
                }
                
            }
        }
        
        
        return min; 
        
        
    }
}
