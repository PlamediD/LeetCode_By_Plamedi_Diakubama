/*
45. Jump Game II

Difficulty: Medium 

Description: 
You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].

Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:

0 <= j <= nums[i] and
i + j < n
Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [2,3,0,1,4]
Output: 2
 

Constraints:

1 <= nums.length <= 104
0 <= nums[i] <= 1000
It's guaranteed that you can reach nums[n - 1].
*/


/*
Language used : C#

Approach
This algorithm relies on three key ideas:

The longest jump found is always the best
We need to keep track of whether the previous longest jump has finished because there might be better jumps than the ones we found so far
When the previous longest jump has finished, that means a jump was already made at the point of the longest jump found so far
Using these 3 ideas we can solve the problem by tracking:

Longest unconfirmed jumps
Longest confirmed jumps
Jump Count
Once the longest confirmed jumps is at 0, we can lock in the unconfirmed jump as the new confirmed jump and increment the count.

Complexity
Time complexity:
O(n)

Space complexity:
O(1)
*/

public class Solution {
  
    public int Jump(int[] nums) {
        int jumpCount = 0; //how many jumps have been made
        int unconfirmedJumps = nums[0]; //the current longest jump that can be made
        int confirmedJumps = nums[0]; // the number of jumps that could have been made with our previous jump

        for(int i = 1; i < nums.Length; i++)
        {
            //every iteration decrement both jump counts;
            confirmedJumps--;
            unconfirmedJumps--;

            //if we find a bigger jump, we know that's the best jump found so far
            if(nums[i] > unconfirmedJumps)
            {
                unconfirmedJumps = nums[i];
            }

            //if the confirmedJumps has reached 0 that means our current jump was the best jump possible
            //so increase the jump count and set the confirmedJumps to be that new unconfirmedJumps amount
            //similarly if this is the final index we also need to increase the jump count
            //because we can't jump any further
            if(confirmedJumps == 0 || i == nums.Length - 1)
            {
                confirmedJumps = unconfirmedJumps;
                jumpCount++;
            } 
        }

        return jumpCount;
    }
}
