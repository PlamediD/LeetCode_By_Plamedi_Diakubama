/*
Description: 
You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?


Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

Assumption: 1<=n<=45

*/
/*
This problem is similar to fibonacci number
I used the dynamic programing approach
the recursion formula is ClimbStairs ( n-1)+ climbStairs (n-2) 
so we can store all the results in a table( array) to avoid recomputation 

Time complexity : O(n) where n is the given integer 
Space complexity : O(n) 
*/public class Solution {
    public int ClimbStairs(int n) {
        if(n<=2){
            return n;
        }

        int [] result =new int[n+1];
        result[1]=1;
        result[2]=2;
        for(int i=3;i<=n;i++){
            result[i]=result[i-1]+result[i-2];
        }
        
        return result[n];
        
    }
}
