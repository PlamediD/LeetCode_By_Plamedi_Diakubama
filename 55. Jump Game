/*
55. Jump Game

Difficulty: Medium 

Description: 

You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.

Return true if you can reach the last index, or false otherwise.

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.
 

Constraints:

1 <= nums.length <= 104
0 <= nums[i] <= 105

*/

/*
Author: Plamedi Diakubama 

Language used: C#

Algorithm Explanation:
Start from the end of the array and iterate backward.
Keep track of the minimum index (lastPosition) from which we can reach the end of the array.
If the current index plus the jump length is greater than or equal to lastPosition, update lastPosition to the current index.
Continue this process until the loop completes.

Time Complexity:
The time complexity is O(N), where N is the length of the input array. The algorithm iterates through the array once.

Space Complexity:
The space complexity is O(1) as there is no additional data structure used.
*/

public class Solution {
    public bool CanJump(int[] nums) {
        int lastPosition = nums.Length - 1;

        for (int i = nums.Length - 1; i >= 0; i--) {
            // Check if it is possible to reach the last position from the current index
            if (i + nums[i] >= lastPosition) {
                lastPosition = i;
            }
        }

        // If lastPosition is at the beginning, it means we can reach the last index
        return lastPosition == 0;
    }
}
