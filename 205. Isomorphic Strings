/*
205. Isomorphic Strings
Description: 
Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.
 

Example 1:

Input: s = "egg", t = "add"
Output: true
Example 2:

Input: s = "foo", t = "bar"
Output: false
Example 3:

Input: s = "paper", t = "title"
Output: true

*/

/*
Language used: C#
Time complexity: O(n): n lenght of the string 
Space complexity: 

Algo: 
check that both strings are the same length. If not return false directly 
if yes then, 
  create a dictionary that contains char from s as keys and char from t as corresponding values
  traverse string s using for loop ( start at index 0 to s.length-1) 
  at each index, check if char from s is not already in the dict and char from t is not in the dict as well
    if both conditions are met, then in the dictionary char from string s at index i will now have value char from string t at index i 
    
  else,
    check two conditions: 
         1. dict does not contain char at index i from s 
         2. the char from s is in the dictionary but its corresponding value is != to current char from t 
    if either is meet, then return false
    
    

*/

//Code below
public class Solution {
    
    
    public bool IsIsomorphic(string s, string t) {
        
      if(s.Length != t.Length) return false;
        
        var dict = new Dictionary<char, char>();
        
        for(int i = 0; i < s.Length; i++){
            if(!dict.ContainsKey(s[i]) && !dict.ContainsValue(t[i]))
                dict[s[i]] = t[i];
            else if(!dict.ContainsKey(s[i]) || dict[s[i]] != t[i]) return false;
        }
        
        return true;
    }
}
