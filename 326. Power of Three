/*
Description: 
Given an integer n, return true if it is a power of three. Otherwise, return false.

An integer n is a power of three, if there exists an integer x such that n == 3x.

 

Example 1:

Input: n = 27
Output: true
Explanation: 27 = 3 to the power of 3 
Example 2:

Input: n = 0
Output: false
Explanation: There is no x where 3to the power of x = 0.

https://leetcode.com/problems/power-of-three/description/?envType=featured-list&envId=top-interview-questions


*/

/*
Algo: 
One simple way of finding out if a number n is a power of a number b is to keep dividing n by b as long as the remainder is 0. This is because we can write 
n=b*b*...*b
 
Hence it should be possible to divide n by b x times, every time with a remainder of 0 and the end result to be 1.


Language used: C#
Time complexity : O(log⁡b(n)). In our case that is O(log⁡3n). //log base 3 of n 
The number of divisions is given by that logarithm.

Space complexity : O(1). no additional memory needed/used .
*/


public class Solution {
    public bool IsPowerOfThree(int n) {
        if(n<1){
            return false; 
        }
        

        while(n % 3 == 0){
            n/=3; 
        }
        return n==1; 
    }



}
