/*
134. Gas Station
Difficulty: Medium 
Deceipption: 

There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].

You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.

Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique

 

Example 1:

Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
Output: 3
Explanation:
Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 4. Your tank = 4 - 1 + 5 = 8
Travel to station 0. Your tank = 8 - 2 + 1 = 7
Travel to station 1. Your tank = 7 - 3 + 2 = 6
Travel to station 2. Your tank = 6 - 4 + 3 = 5
Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
Therefore, return 3 as the starting index.
Example 2:

Input: gas = [2,3,4], cost = [3,4,3]
Output: -1
Explanation:
You can't start at station 0 or 1, as there is not enough gas to travel to the next station.
Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 0. Your tank = 4 - 3 + 2 = 3
Travel to station 1. Your tank = 3 - 3 + 3 = 3
You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.
Therefore, you can't travel around the circuit once no matter where you start.
 

Constraints:

n == gas.length == cost.length
1 <= n <= 105
0 <= gas[i], cost[i] <= 104
*/

/*
Initial Solution

Certainly! The problem can be solved by iterating through the gas stations and checking if it is possible to complete a circuit starting from each station. Here's a possible implementation in C# with limited use of built-in functions:

csharp
Copy code
public class Solution {
    public int CanCompleteCircuit(int[] gas, int[] cost) {
        int n = gas.Length;
        
        for (int start = 0; start < n; start++) {
            int currentGas = 0;
            int i = start;

            do {
                currentGas += gas[i] - cost[i];
                i = (i + 1) % n;
            } while (currentGas >= 0 && i != start);

            if (currentGas >= 0) {
                return start;
            }
        }

        return -1;
    }
}
Algorithm Explanation:
Iterate through each gas station (start) as a potential starting point.
Use a loop to simulate traveling in a circular route, updating the currentGas at each station.
If at any point the currentGas becomes negative, move on to the next starting station.
If the loop completes and currentGas is non-negative, return the current starting station as the answer. Otherwise, return -1.
Time Complexity:
The time complexity is O(N), where N is the number of gas stations. The algorithm iterates through each station once.
Space Complexity:
The space complexity is O(1) as no additional data structures are used.
Issue: time limit exceeded 
*/

public class Solution {
    public int CanCompleteCircuit(int[] gas, int[] cost) {
        int n = gas.Length;
        
        for (int start = 0; start < n; start++) {
            int currentGas = 0;
            int i = start;

            do {
                currentGas += gas[i] - cost[i];
                i = (i + 1) % n;
            } while (currentGas >= 0 && i != start);

            if (currentGas >= 0) {
                return start;
            }
        }

        return -1;
    }
}
