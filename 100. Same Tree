/*
100. Same Tree
Difficulty: Easy
Description: 
Given the roots of two binary trees p and q, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.

 

Example 1:Input: p = [1,2,3], q = [1,2,3]
Output: true
Example 2:Input: p = [1,2], q = [1,null,2]
Output: false
Example 3:Input: p = [1,2,1], q = [1,1,2]
Output: false
 

Constraints:

The number of nodes in both trees is in the range [0, 100].
-104 <= Node.val <= 104
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public bool IsSameTree(TreeNode p, TreeNode q) {
        Queue<TreeNode> queue = new Queue<TreeNode>();
        queue.Enqueue(p);
        queue.Enqueue(q);
        
        while (queue.Count > 0) {
            TreeNode node1 = queue.Dequeue();
            TreeNode node2 = queue.Dequeue();
            
            if (node1 == null && node2 == null) {
                continue; // Both nodes are null, move to the next pair
            }
            
            if (node1 == null || node2 == null || node1.val != node2.val) {
                return false; // Values don't match or one node is null while the other is not
            }
            
            queue.Enqueue(node1.left);
            queue.Enqueue(node2.left);
            queue.Enqueue(node1.right);
            queue.Enqueue(node2.right);
        }
        
        return true;
    }
}
