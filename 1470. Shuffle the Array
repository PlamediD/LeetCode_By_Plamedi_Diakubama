/*
1470. Shuffle the Array
Description: 
Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].

Return the array in the form [x1,y1,x2,y2,...,xn,yn].

 

Example 1:

Input: nums = [2,5,1,3,4,7], n = 3
Output: [2,3,5,4,1,7] 
Explanation: Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].
Example 2:

Input: nums = [1,2,3,4,4,3,2,1], n = 4
Output: [1,4,2,3,3,2,4,1]
Example 3:

Input: nums = [1,1,2,2], n = 2
Output: [1,2,1,2]
 

Constraints:

1 <= n <= 500
nums.length == 2n
1 <= nums[i] <= 10^3
*/

public class Solution {
    public int[] Shuffle(int[] nums, int n) {

      /* 
Language used : C# 
      x elements are from index 0 to n-1
      y element are from n to n to 2*n-1
      x elements should be placed at even indexex( 0,2,4,6,...)
      y elements should be placed at odd indexes ( 1,3,5,..) 

      so new array at index i*2 = nums[i]
      i*2 because x elements should be at even indexes 
      so new array at index 2*i +1 = nums[i+n]
      2*i+1 because y elements should be at odd indexes 
      i goes from 0 to n-1 
      so i=0, i<n; i++

      Time complexity: O(nums.Length )/ O(n) whre n= nums.Length 
      Space complexity O(1 ): we are not using additional spcae other than the output array 
      */
        int [] results= new int[nums.Length]; 
        for(int i=0; i<n; i++){
          results[i*2]= nums[i]; 
          results[i*2+1]= nums[i+n]; 
        }
        return results; 

        
    }
}
