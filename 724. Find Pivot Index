/*
Description: 
Given an array of integers nums, calculate the pivot index of this array.

The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.

If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.

Return the leftmost pivot index. If no such index exists, return -1.

 

Example 1:

Input: nums = [1,7,3,6,5,6]
Output: 3
Explanation:
The pivot index is 3.
Left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11
Right sum = nums[4] + nums[5] = 5 + 6 = 11
Example 2:

Input: nums = [1,2,3]
Output: -1
Explanation:
There is no index that satisfies the conditions in the problem statement.
Example 3:

Input: nums = [2,1,-1]
Output: 0
Explanation:
The pivot index is 0.
Left sum = 0 (no elements to the left of index 0)
Right sum = nums[1] + nums[2] = 1 + -1 = 0
 

Constraints:

1 <= nums.length <= 104
-1000 <= nums[i] <= 1000
 


*/

/*
Algo: 
Step 1: int right(0) initializing right as zero and left(0) initializing left as zero
taking sum of all the element and assigning it to right
Step 2: running a loop through the whole array from left to right (i=0 --> n-1)
Step 3: at every step to find the if right sum = left sum we subtract current element from the array i.e. nums[i]
hence right-=nums[i]
Step 4: by implementing step 3 we check if right is equal to left now or not
if(left == right) return i;
Step 5: and if nothing is returned this step will be executed. the subtracted element from right is added to left
left += nums[i] loop is closed here
Step 6: return -1 out of loop implying no pivot found
by implementing these step we are trying to see at which element right sum becomes equal to left sum and we return index of that element.
*/

class Solution {
    public int pivotIndex(int[] nums) {
        int pivot = -1;
        int n = nums.length;
        if(nums == null || n == 0) return pivot;
        
        int left = 0, right = nums[0];
        for(int i = 1; i < n; i++){
            right += nums[i];
        }
        
        for(int i = 0; i < n; i++){
            right -= nums[i];
            if(left == right) return i;
            left += nums[i];
        }
        
        return pivot;
    }
}

//option 2 Same algorithm but slightly different implimentation 
public class Solution {
    public int PivotIndex(int[] nums) {
        if(nums.Length==0){
            return -1; 
        }
        else if(nums.Length==1){
            return 0; 
        }
        else{
            int rightSum=0;
            int leftSum=0;
            for(int i=0; i<nums.Length;i++){
                rightSum+=nums[i];
            }

            for(int i=0;i<nums.Length;i++){
                rightSum-=nums[i];
                if(leftSum==rightSum){
                    return i;
                }
                else{
                    leftSum+=nums[i];
                }
            }
        }
        return -1;
    }
}
