/*
2299. Strong Password Checker II

Description: 
A password is said to be strong if it satisfies all the following criteria:

It has at least 8 characters.
It contains at least one lowercase letter.
It contains at least one uppercase letter.
It contains at least one digit.
It contains at least one special character. The special characters are the characters in the following string: "!@#$%^&*()-+".
It does not contain 2 of the same character in adjacent positions (i.e., "aab" violates this condition, but "aba" does not).
Given a string password, return true if it is a strong password. Otherwise, return false.

 

Example 1:

Input: password = "IloveLe3tcode!"
Output: true
Explanation: The password meets all the requirements. Therefore, we return true.
Example 2:

Input: password = "Me+You--IsMyDream"
Output: false
Explanation: The password does not contain a digit and also contains 2 of the same character in adjacent positions. Therefore, we return false.
Example 3:

Input: password = "1aB!"
Output: false
Explanation: The password does not meet the length requirement. Therefore, we return false.
*/

//Language used: C#
//Time complexity: O(n)
//Space complexity: O(1) 

/*
Algo:
- check if size is <8: if it is return false
- if size>= 8, then start traversing string from start to finish ( left to right) and check each requirements individually 
- if two successive characters are the same return false directly
- at the end check if all bool ( upper, lower, special char, digit) have been satisfied, if yes then result becomes true
- else reuslt will stay false as originally 
- if we have not returned anything yet, return the var result 

//code below: 
public class Solution {
    public bool StrongPasswordCheckerII(string password) {
        bool oneLower=false; bool oneUpper=false; bool oneDigit=false; bool oneSpecial=false;
        bool result=false;
        
        if(password.Length<8){
            return false;
        }
        
         string splchrs = "\"!@#$%^&*()-+";
        for(int i=0; i<password.Length; i++){
            if(i>0 && password[i-1]==password[i]){
                return false; 
            }
            if(char.IsLower(password[i])){
                oneLower=true;
            }
            if(char.IsUpper(password[i])){
                oneUpper=true;
            }
            if(char.IsDigit(password[i])){
                oneDigit=true;
            }
            if(splchrs.Contains(password[i])){
                oneSpecial=true;
            }
            
        }
        
        if(oneSpecial && oneLower && oneUpper && oneDigit){
           result=true;
        }
        
       return result; 
        
        
    }
}
*/
