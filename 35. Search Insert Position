/*
Description: 
Given a sorted array of distinct integers and a target value, return the index if the target is found. 
If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4

*/

/*
Algo: 
Binary search technique 
Iftarget < nums[mid] discard the right space ( move the right pointer ) and continue searching on the left 
If target> nums[mid] : discard left space ( move left pointer to mid+1) and continue search on the right half 
if found, return mid
If not, return the index where it would be if it were inserted in order.
Time complexity: O(n log n) where n=length of the given array 
Space complexity: O(1) no extra space needed 
*/
public class Solution {
    public int SearchInsert(int[] nums, int target) {
        int left=0; 
        int right=nums.Length-1;
        int mid=0;
        while(left<=right){
            mid=(left+right)/2;
            if(target<nums[mid]){
                right=mid-1;
            }
            else if(target>nums[mid]){
                left=mid+1;
            }
            else{
                return mid;
            }
        }
        return left;
    }
}
