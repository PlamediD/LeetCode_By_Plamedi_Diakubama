/*
Description: 
You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.
example 1 
Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]

Example 2:

Input: list1 = [], list2 = []
Output: []

Example 3:

Input: list1 = [], list2 = [0]
Output: [0]
*/
/*
Time Complexity: O(M + N), Where M and N are the size of the list1 and list2 respectively.
Auxiliary Space: O(M+N), Function call stack space
*/
public class Solution {
    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {

        //base case: either of the lists is empty 
        //two base cases to check whether one of the linked lists will reach the NULL, 
        //then append the rest of the linked list.
        if(list1==null){
            return list2;
        }
        if(list2==null){
            return list1; 
        }

        /*
        check which value is less from both the current nodes
        The one with less value makes a recursion call by moving ahead with that pointer        
        andsimultaneously append that recursion call with the node
        */
         if (list2.val > list1.val)
            {
                list1.next = MergeTwoLists(list1.next, list2);

                return list1;
            }

            list2.next = MergeTwoLists(list1, list2.next);
            return list2;
        
    }
}
