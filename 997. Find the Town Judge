/*
Description: 
997. Find the Town Judge
In a town, there are n people labeled from 1 to n. There is a rumor that one of these people is secretly the town judge.

If the town judge exists, then:

The town judge trusts nobody.
Everybody (except for the town judge) trusts the town judge.
There is exactly one person that satisfies properties 1 and 2.
You are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi.

Return the label of the town judge if the town judge exists and can be identified, or return -1 otherwise.

 

Example 1:

Input: n = 2, trust = [[1,2]]
Output: 2
Example 2:

Input: n = 3, trust = [[1,3],[2,3]]
Output: 3
Example 3:

Input: n = 3, trust = [[1,3],[2,3],[3,1]]
Output: -1
*/
/*
Algo: 

Intuition
Need to keep track of trust counts of each person while because anyone can be a judge. Suppose [1, 2] then there is a possibilty that 2 can be a judge.

Approach
Points to remember:

Town judge trusts no one. (Not even himself)
Every one trusts him. (This is important)
There's exactly 1 town judge.
Keep track of trust count of each person in the trust array. The one whose trust count is 1 less than n is the town judge. If noone has trust count as mentioned above, the town doesn't have any town judge.

T(i) = C(i) == n - 1; Where:
T(i) = Is Town judge?
C(i) = Trust count of person i
n = Total number of people in the town

Complexity
Time complexity: O(n)
Space complexity: O(n) // for using the count array



*/
public class Solution {
    public int FindJudge(int n, int[][] trust) {
        int[] count = new int[n + 1];
			foreach(int[] t in trust)
			{
				count[t[0]]--;
				count[t[1]]++;
			}

			for(int i = 1; i <= n; i++)
				if (count[i] == n - 1) return i;

			return -1;
    }
}
