/*
25. Reverse Nodes in k-Group

Description: 
Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]
Example 2:
Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
 

Constraints:

The number of nodes in the list is n.
1 <= k <= n <= 5000
0 <= Node.val <= 1000
 

*/

/*
Author: Plamedi Diakubama 
Language used: C#

Algorithm:

We maintain a dummy node to simplify the logic, and prev to track the node before the sublist we're currently processing.
Iterate through the list while there are enough nodes for a sublist of size k.
For each sublist, find the tail node by traversing k nodes.
Reverse the sublist between head and tail using the Reverse method.
Connect the reversed sublist to the overall list.
Update prev, head, and continue until the end of the list.
Return the modified list.

Time complexity: The time complexity of this algorithm is O(n), where n is the number of nodes in the linked list. We traverse each node of the list once.

Space complexity: The space complexity is O(1) as we are not using any extra space that grows with the input size. We're only using a constant amount of extra space for variables and pointers.
*/

public class ListNode {
    public int val;
    public ListNode next;
    public ListNode(int val = 0, ListNode next = null) {
        this.val = val;
        this.next = next;
    }
}

public class Solution {
    public ListNode ReverseKGroup(ListNode head, int k) {
        if (head == null || k == 1)
            return head;
        
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode prev = dummy;
        
        while (head != null) {
            ListNode tail = prev;
            for (int i = 0; i < k; i++) {
                tail = tail.next;
                if (tail == null)
                    return dummy.next;
            }
            
            ListNode nextHead = tail.next;
            (head, tail) = Reverse(head, tail);
            prev.next = head;
            tail.next = nextHead;
            prev = tail;
            head = nextHead;
        }
        
        return dummy.next;
    }
    
    private (ListNode, ListNode) Reverse(ListNode head, ListNode tail) {
        ListNode prev = tail.next;
        ListNode curr = head;
        while (prev != tail) {
            ListNode nextNode = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextNode;
        }
        return (tail, head);
    }
}

