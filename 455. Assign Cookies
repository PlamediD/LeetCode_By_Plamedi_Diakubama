/* Description: 
Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.

Each child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. If s[j] >= g[i], we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.

 

Example 1:

Input: g = [1,2,3], s = [1,1]
Output: 1
Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. 
And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.
You need to output 1.
Example 2:

Input: g = [1,2], s = [1,2,3]
Output: 2
Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. 
You have 3 cookies and their sizes are big enough to gratify all of the children, 
You need to output 2.
*/

/*
Language used : C#

My approach: 
Greedy algo 

Sort both array in ascending order 
intitalize 3 variables i , j , count all starting at 0 

Traverse and for each kid, check what is the minimum cookie size that can satisfy them. Keep updating j until found or array of cookie becomes empty. 
Once found, assign them that coookie, update count and move to the next child. 
Return count 
Time complexity : O(n log n) because of the sorting as a prestep ( in case merge sort is used ) 
Space complexity : O(1) 


*/

public class Solution {
    public int FindContentChildren(int[] g, int[] s) {
        
        //sort both arrays in ascending order using built in sort algo
        
        
        Array.Sort(g);
        Array.Sort(s);
        
       
        
        int i=0, j=0; countSatisfiedChild=0; 
        
        while(i<g.Length && j<s.Length){
            if(s[j]>=g[i]){
                
                //assign that cookie, so move both indexes to the next elements 
                //update count of satisfied child
                i++;
                j++;
                countSatisfiedChild++; 
                
            }
            else{
                j++;
            }
            
        }
        return countSatisfiedChild; 
        
    }
}
