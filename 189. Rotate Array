/*
189. Rotate Array
Difficu;ty: Medium 
Description:

Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.

 

Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
 

Constraints:

1 <= nums.length <= 105
-231 <= nums[i] <= 231 - 1
0 <= k <= 105
*/

/*
Language used: C#
Time complexity: O(N)
Space complexity:O(n) 
*/

using System;
public class Solution {
    public void Rotate(int[] nums, int k) {

        /*
        Edge cases: - k=0
                    -array contains only one element
                    - array length==k
                    
        */
       if( k==0|| nums.Length==1||nums.Length==k){
           return; 
       } 

        //Re-calculate the K, it may be greater than the Array length.
        k = k % nums.Length;

        //Console.WriteLine(nums.Length); 

       List<int> numsList = nums.ToList();
        
        for(int i = 0 ; i < nums.Length; i++)
        {
            if(i<k)
            {
                nums[i] = numsList[nums.Length - k + i];
            }
            else 
            {
                nums[i] = numsList[i-k];
            }
        }

    }
}
