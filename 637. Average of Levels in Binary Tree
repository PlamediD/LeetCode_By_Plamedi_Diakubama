/*

637. Average of Levels in Binary Tree
Difficulty:Easy

Description:
Given the root of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within 10-5 of the actual answer will be accepted.
 

Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [3.00000,14.50000,11.00000]
Explanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.
Hence return [3, 14.5, 11].

Example 2:
Input: root = [3,9,20,15,7]
Output: [3.00000,14.50000,11.00000]
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-231 <= Node.val <= 231 - 1
*/

/*
Author: Plamedi Diakubama 
Language used: C#

Algo: 
Uses a depth-first traversal approach to traverse the tree and calculate the sum and count of nodes at each level. Then, it divides the sum by the count to find the average value of each level.

Here's a breakdown of the algorithm:

It initializes two lists: result to store the sum of values at each level and counter to store the count of nodes at each level.
It calls the AvgOfLevels method with the root of the tree, initial level 1, result, and counter lists.
In the AvgOfLevels method:
If the current node is null, it returns.
If the current level exceeds the size of the result list, it adds the value of the current node to the result list 
and initializes the corresponding count in the counter list to 1.
Otherwise, it increments the count of nodes and updates the sum at the current level in the result list.
It recursively calls AvgOfLevels for the left and right subtrees with an increased level.
After traversing the entire tree, it goes through the result list and divides each sum by the corresponding count to get the average value for each level.

Time Complexity:
The time complexity of this algorithm is O(N), where N is the number of nodes in the binary tree. 
This is because the algorithm visits each node exactly once during the depth-first traversal.

Space Complexity:
The space complexity of this algorithm is also O(N), where N is the number of nodes in the binary tree. 
This is due to the space used by the result and counter lists, as well as the recursion stack during the depth-first traversal, 
which can go as deep as the height of the tree.
*/

public class Solution {
    public IList<double> AverageOfLevels(TreeNode root) {
       
        List<double> result = new List<double>();
        List<int> counter = new List<int>();

        AvgOfLevels(root, 1, result, counter);
        for(int i = 0 ; i < result.Count; i++)
        {
            result[i]/= counter[i];
        }
        return result;
    }

    public void AvgOfLevels(TreeNode root, int level, IList<double> result, IList<int> counter)
    {
        if(root == null)
            return;

        if(result.Count < level)
        {
            result.Add(root.val);
            counter.Add(1);
        }
        else
        {
            counter[level-1]++;
            result[level-1] += root.val;
        }

        AvgOfLevels(root.left,level + 1,result, counter);
        AvgOfLevels(root.right,level + 1,result, counter);


    }
}
